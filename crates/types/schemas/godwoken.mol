import blockchain;

option Byte32Opt (Byte32);

array Byte20 [byte; 20];
array Signature [byte; 65];

struct BlockMerkleState {
    merkle_root: Byte32,
    count: Uint64,
}

struct AccountMerkleState {
    merkle_root: Byte32,
    count: Uint32,
}

table GlobalState {
    account: AccountMerkleState,
    block: BlockMerkleState,
    status: Status,
}

union Status {
    Running,
    Reverting,
}

// normal status
table Running {}
// layer2 chain is reverting
struct Reverting {
    next_block_number: Uint64,
    challenger_id: Uint32,
}

struct Account {
    id: Uint32,
    nonce: Uint32,
    script_hash: Byte32,
}

table RawL2Transaction {
    from_id: Uint32,
    to_id: Uint32,
    nonce: Uint32,
    args: Bytes,
}

table L2Transaction {
    raw: RawL2Transaction,
    signature: Signature,
}

vector L2TransactionVec <L2Transaction>;

table RawL2Block {
    number: Uint64,
    aggregator_id: Uint32,
    stake_cell_owner_lock_hash: Byte32,
    timestamp: Uint64,
    prev_account: AccountMerkleState,
    post_account: AccountMerkleState,
    submit_transactions: SubmitTransactionsOpt,
}

table L2Block {
    raw: RawL2Block,
    signature: Signature,
    kv_state: KVPairVec,
    kv_state_proof: Bytes,
    transactions: L2TransactionVec,
    block_proof: Bytes,
}

// --- define actions ---
table SubmitTransactions {
    tx_witness_root: Byte32,
    tx_count: Uint32,
    // hash(account_root | account_count) before each transaction
    compacted_post_root_list: Byte32Vec,
}

// TODO
table Leave {
}

// Revert the chain, send reward to reverter
struct RevertChain {
    reverter_id: Uint32,
    invalid_block_number: Uint64,
    post_account: AccountMerkleState,
}

option LeaveOpt (Leave);
option RevertChainOpt (RevertChain);
option SubmitTransactionsOpt (SubmitTransactions);

// --- end of define actions ---

// --- contract execution ---

table KVPair { k: Byte32, v: Byte32, }
vector KVPairVec <KVPair>;

table CallContext {
    from_id: Uint32,
    to_id: Uint32,
    // 0: construct, 1: handle_message
    call_type: byte,
    args: Bytes,
}

struct BlockInfo {
    aggregator_id: Uint32,
    number: Uint64,
    timestamp: Uint64,
}

table VerificationContext {
    block_info: BlockInfo,
    call_context: CallContext,
    inputs: KVPairVec,
    prev_account_state: Byte32,
    post_account_state: Byte32,
    return_data_hash: Byte32,
    proof: Bytes,
}

// --- end of contract execution ---

// --- deposition lock ---
struct DepositionLockArgs {
    rollup_type_id: Byte32,
    pubkey_hash: Byte20,
    account_id: Uint32,
}
// --- end of deposition lock ---

// --- stake lock ---
struct StakeLockArgs {
    rollup_type_id: Byte32,
    owner_lock_hash: Byte32,
    signing_pubkey_hash: Byte20,
    finalize_block_number: Uint64,
}
// --- end of stake lock ---

// --- layer2 SUDT ---
union SUDTArgs {
    SUDTScriptHash,
    SUDTQuery,
    SUDTTransfer,
    SUDTPrepareWithdrawal,
}

table SUDTScriptHash {}
struct SUDTQuery {
    account_id: Uint32,
}

struct SUDTTransfer {
    to: Uint32,
    amount: Uint128,
    fee: Uint128,
}

struct SUDTPrepareWithdrawal {
    withdrawal_lock_hash: Byte32,
    amount: Uint128,
    fee: Uint128,
}
// --- end of layer2 SUDT ---

// --- challenge ---
// start a challenge
struct StartChallenge {
    block_hash: Byte32, // hash of challenged block
    block_number: Uint64, // number of challenged block
    tx_index: Uint32, // challenge tx
}

// cancel a challenge by execute the transaction
table CancelChallenge {
    l2block: L2Block,
    block_proof: Bytes,
    kv_state: KVPairVec,
    kv_state_proof: Bytes,
}
// --- end of challenge ---