import blockchain;

option Byte32Opt (Byte32);

array Byte20 [byte; 20];
array Signature [byte; 65];

struct BlockMerkleState {
    merkle_root: Byte32,
    count: Uint64,
}

struct AccountMerkleState {
    merkle_root: Byte32,
    count: Uint32,
}

struct GlobalState {
    rollup_config_hash: Byte32,
    account: AccountMerkleState,
    block: BlockMerkleState,
    reverted_block_root: Byte32,
    last_finalized_block_number: Uint64,
    // 0: running, 1: halting
    status: byte,
}

struct RollupConfig {
    l1_sudt_type_hash: Byte32,
    custodian_type_hash: Byte32,
    deposition_type_hash: Byte32,
    withdrawal_type_hash: Byte32,
    challenge_type_hash: Byte32,
    stake_type_hash: Byte32,
    burn_type_hash: Byte32,
    l2_sudt_validator_type_hash: Byte32,
}

table RawL2Transaction {
    from_id: Uint32,
    to_id: Uint32,
    nonce: Uint32,
    args: Bytes,
}

table L2Transaction {
    raw: RawL2Transaction,
    signature: Signature,
}

vector L2TransactionVec <L2Transaction>;

table RawL2Block {
    number: Uint64,
    block_producer_id: Uint32,
    parent_block_hash: Byte32,
    stake_cell_owner_lock_hash: Byte32,
    timestamp: Uint64,
    prev_account: AccountMerkleState,
    post_account: AccountMerkleState,
    submit_transactions: SubmitTransactions,
    withdrawal_requests_root: Byte32,
}

table L2Block {
    raw: RawL2Block,
    kv_state: KVPairVec,
    kv_state_proof: Bytes,
    transactions: L2TransactionVec,
    block_proof: Bytes,
    withdrawal_requests: WithdrawalRequestVec,
}

table DepositionRequest {
    // CKB amount
    capacity: Uint64,
    // SUDT amount
    amount: Uint128,
    sudt_script_hash: Byte32,
    script: Script,
}

vector DepositionRequestVec <DepositionRequest>;

struct RawWithdrawalRequest {
    nonce: Uint32,
    // CKB amount
    capacity: Uint64,
    // SUDT amount
    amount: Uint128,
    sudt_script_hash: Byte32,
    // layer2 account_script_hash
    account_script_hash: Byte32,
    // buyer can pay sell_amount and sell_capacity to unlock
    sell_amount: Uint128,
    sell_capacity: Uint64,
    // layer1 lock to withdraw after challenge period
    owner_lock_hash: Byte32,
    // layer1 lock to receive the payment, must exists on the chain
    payment_lock_hash: Byte32,
}

vector WithdrawalRequestVec <WithdrawalRequest>;

struct WithdrawalRequest {
    raw: RawWithdrawalRequest,
    signature: Signature,
}

// --- define actions ---
table SubmitTransactions {
    tx_witness_root: Byte32,
    tx_count: Uint32,
    // hash(account_root | account_count) before each transaction
    compacted_post_root_list: Byte32Vec,
}

// --- end of define actions ---

// --- contract execution ---

table KVPair { k: Byte32, v: Byte32, }
vector KVPairVec <KVPair>;

struct BlockInfo {
    block_producer_id: Uint32,
    number: Uint64,
    timestamp: Uint64,
}

// --- end of contract execution ---

// --- deposition lock ---
// a rollup_type_hash exists before this args, to make args friendly to prefix search
table DepositionLockArgs {
    // layer1 lock hash
    owner_lock_hash: Byte32,
    layer2_lock: Script,
    cancel_timeout: Uint64,
}
// --- end of deposition lock ---

// --- custodian lock ---
// a rollup_type_hash exists before this args, to make args friendly to prefix search
table CustodianLockArgs {
    // used for revert this cell to deposition request cell
    // after finalize, this lock is meaningless
    deposition_lock_args: DepositionLockArgs,
    deposition_block_hash: Byte32,
    deposition_block_number: Uint64,
}

table UnlockCustodianViaRevert {
    block_proof: Bytes,
    deposition_lock_hash: Byte32,
}

// --- end of custodian lock ---

// --- withdrawal lock ---
// a rollup_type_hash exists before this args, to make args friendly to prefix search
struct WithdrawalLockArgs {
    account_script_hash: Byte32,
    withdrawal_block_hash: Byte32,
    withdrawal_block_number: Uint64,
    // buyer can pay sell_amount token to unlock
    sudt_script_hash: Byte32,
    sell_amount: Uint128,
    sell_capacity: Uint64,
    // layer1 lock to withdraw after challenge period
    owner_lock_hash: Byte32,
    // layer1 lock to receive the payment, must exists on the chain
    payment_lock_hash: Byte32,
}

union UnlockWithdrawal {
    UnlockWithdrawalViaFinalize,
    UnlockWithdrawalViaRevert,
    UnlockWithdrawalViaTrade,
}
table UnlockWithdrawalViaFinalize {
    block_proof: Bytes,
}
table UnlockWithdrawalViaRevert {
    block_proof: Bytes,
    custodian_lock_hash: Byte32,
}
table UnlockWithdrawalViaTrade {
    owner_lock: Script,
}
// --- end of withdrawal lock ---

// --- stake lock ---
// a rollup_type_hash exists before this args, to make args friendly to prefix search
struct StakeLockArgs {
    owner_lock_hash: Byte32,
    stake_block_number: Uint64,
}
// --- end of stake lock ---

// --- builtin Meta contract ---
union MetaContractArgs {
    CreateAccount,
}

table CreateAccount {
    script: Script,
}
// --- end of Meta contract

// --- layer2 SUDT ---
union SUDTArgs {
    SUDTQuery,
    SUDTTransfer,
}

struct SUDTQuery {
    account_id: Uint32,
}

struct SUDTTransfer {
    to: Uint32,
    amount: Uint128,
    fee: Uint128,
}
// --- end of layer2 SUDT ---

// --- challenge ---

struct ChallengeTarget {
    block_hash: Byte32,
    tx_index: Uint32,
}

// a rollup_type_hash exists before this args, to make args friendly to prefix search
table ChallengeLockArgs {
    target: ChallengeTarget,
    // layer1 lock to receive the rewards
    rewards_receiver_lock: Script,
}

// witness to prove the validity of challenge
table ChallengeWitness {
    raw_l2block: RawL2Block,
    block_proof: Bytes, // block proof
}

vector ScriptVec<Script>;

// witness to cancel a challenge by execute the transaction
table CancelChallenge {
    raw_l2block: RawL2Block,
    l2tx: L2Transaction,
    tx_proof: Bytes,
    kv_state: KVPairVec,
    kv_state_proof: Bytes,
    scripts: ScriptVec,
    return_data_hash: Byte32,
    account_count: Uint32,
}
// --- end of challenge ---

// --- unlock account ---
struct UnlockAccountWitness {
    message: Byte32,
    signature: Signature,
}
// --- end of unlock account ---

// --- Rollup ---
table RollupEnterChallenge {}
table RollupCancelChallenge {}
table RollupRevert {
    target_block: RawL2Block,
    block_proof: Bytes,
    reverted_block_proof: Bytes,
}
union RollupAction {
    // submit layer2 block
    L2Block,
    // change rollup status to halting
    RollupEnterChallenge,
    // change rollup status to running
    RollupCancelChallenge,
    // revert layer2 blocks and change status to running
    RollupRevert,
}
// --- end of Rollup ---

// header info
struct HeaderInfo {
    number: Uint64,
    block_hash: Byte32,
}
