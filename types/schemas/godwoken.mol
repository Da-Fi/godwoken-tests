import blockchain;

option Byte32Opt (Byte32);

array Byte20 [byte; 20];
array Signature [byte; 65];

struct MerkleState {
    merkle_root: Byte32,
    count: Uint64,
}

table GlobalState {
    account: MerkleState,
    block: MerkleState,
    status: Status,
}

union Status {
    Running,
    Reverting,
}

// normal status
table Running {}
// layer2 chain is reverting
struct Reverting {
    next_block_number: Uint64,
    challenger_id: Uint32,
}

struct Account {
    id: Uint32,
    nonce: Uint32,
    pubkey_hash: Byte20,
    code_hash: Byte32,
}

table RawL2Transaction {
    from_id: Uint32,
    to_id: Uint32,
    nonce: Uint32,
    args: Bytes,
}

table L2Transaction {
    raw: RawL2Transaction,
    signature: Signature,
}

table RawL2Block {
    number: Uint64,
    aggregator_id: Uint32,
    timestamp: Uint64,
    prev_account: MerkleState,
    post_account: MerkleState,
    leave: LeaveOpt,
    join: JoinOpt,
    revert_chain: RevertChainOpt,
    submit_transactions: SubmitTransactionsOpt,
    valid: byte,
}

table L2Block {
    raw: RawL2Block,
    signature: Signature,
    inputs: KVPairVec,
    proof: Bytes,
}

// --- define actions ---
table SubmitTransactions {
    tx_root: Byte32,
    tx_count: Uint32,
    // account_root before each transaction
    account_root_list: Byte32Vec,
}

// TODO
table Join {
}

table Leave {
}

// Revert the chain, send reward to reverter
struct RevertChain {
    reverter_id: Uint32,
    invalid_block_number: Uint64,
    post_account: MerkleState,
}

option JoinOpt (Join);
option LeaveOpt (Leave);
option RevertChainOpt (RevertChain);
option SubmitTransactionsOpt (SubmitTransactions);

// --- end of define actions ---

// --- contract execution ---

table KVPair { k: Byte32, v: Byte32, }
vector KVPairVec <KVPair>;

table CallContext {
    from_id: Uint32,
    to_id: Uint32,
    // 0: construct, 1: handle_message
    call_type: byte,
    args: Bytes,
}

struct BlockInfo {
    aggregator_id: Uint32,
    number: Uint64,
    timestamp: Uint64,
}

table VerificationContext {
    block_info: BlockInfo,
    call_context: CallContext,
    inputs: KVPairVec,
    prev_account_state: Byte32,
    post_account_state: Byte32,
    return_data_hash: Byte32,
    proof: Bytes,
}

// --- end of contract execution ---

// --- deposition lock ---
struct DepositionLockArgs {
    rollup_type_id: Byte32,
    pubkey_hash: Byte20,
    account_id: Uint32,
}
// --- end of deposition lock ---

// --- layer2 SUDT ---
union SUDTArgs {
    SUDTQuery,
    SUDTTransfer,
}

struct SUDTQuery {
    token_id: Byte32,
    account_id: Uint32,
}

struct SUDTTransfer {
    token_id: Byte32,
    to: Uint32,
    value: Uint128,
}
// --- end of layer2 SUDT ---